From 166e073e1cd8a4d8d6c113a16107d222aa00e4f1 Mon Sep 17 00:00:00 2001
From: Bruno Dias <dias.h.bruno@gmail.com>
Date: Sun, 25 Jun 2017 01:38:35 -0300
Subject: [PATCH] [fixed] improvements on setAppElement...

There was some pitfalls on how `setAppElement` work.

If your <script /> was in <head />, there was a change that it tries
to use `document.body` that is not yet ready.

Another one was using an selector string that does not find any
elements, causing it to try to perform all call on `null`.

This patch can also help if you want to do server-side rendering,
but this was not tested and, perhaps, it's better to use this function
correctly.
---
 specs/Modal.spec.js         | 15 +++++++++++++++
 src/helpers/ariaAppHider.js | 21 +++++++++++++++++++--
 2 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/specs/Modal.spec.js b/specs/Modal.spec.js
index dea72c9..b47ff69 100644
--- a/specs/Modal.spec.js
+++ b/specs/Modal.spec.js
@@ -240,6 +240,21 @@ describe('State', () => {
     expect(!isBodyWithReactModalOpenClass()).toBeTruthy();
   });
 
+  it('removes aria-hidden without an appElement will try to fallback to document.body', () => {
+    ariaAppHider.notDocumentReadyOrSSRTesting();
+    const node = document.createElement('div');
+    ReactDOM.render((
+      <Modal isOpen />
+    ), node);
+    expect(document.body.getAttribute('aria-hidden')).toEqual('true');
+    ReactDOM.unmountComponentAtNode(node);
+    expect(document.body.getAttribute('aria-hidden')).toEqual(null);
+  });
+
+  it('raise an exception if appElement is a selector and no elements were found.', () => {
+    expect(() => ariaAppHider.setElement('.test')).toThrow();
+  });
+
   it('removes aria-hidden from appElement when unmounted w/o closing', () => {
     const el = document.createElement('div');
     const node = document.createElement('div');
diff --git a/src/helpers/ariaAppHider.js b/src/helpers/ariaAppHider.js
index 9bcf422..03a2af4 100644
--- a/src/helpers/ariaAppHider.js
+++ b/src/helpers/ariaAppHider.js
@@ -1,9 +1,16 @@
-let globalElement = typeof document !== 'undefined' ? document.body : null;
+let globalElement = null;
 
 export function setElement(element) {
   let useElement = element;
   if (typeof useElement === 'string') {
     const el = document.querySelectorAll(useElement);
+
+    if (!el || !el.length) {
+      throw new Error(
+        `react-modal: No elements were found for selector ${useElement}.`
+      );
+    }
+
     useElement = 'length' in el ? el[0] : el;
   }
   globalElement = useElement || globalElement;
@@ -12,8 +19,14 @@ export function setElement(element) {
 
 export function validateElement(appElement) {
   if (!appElement && !globalElement) {
+    if (document && document.body) {
+      // force fallback to document.body
+      setElement(document.body);
+      return;
+    }
     throw new Error([
-      'react-modal: You must set an element with',
+      'react-modal: Cannot fallback to `document.body`, because it\'s not ready or available.',
+      'If you are doing server-side rendering, use this function to defined an element.',
       '`Modal.setAppElement(el)` to make this accessible'
     ]);
   }
@@ -34,6 +47,10 @@ export function toggle(shouldHide, appElement) {
   apply(appElement);
 }
 
+export function notDocumentReadyOrSSRTesting() {
+  globalElement = null;
+}
+
 export function resetForTesting() {
   globalElement = document.body;
 }
-- 
2.13.1

