From 950272a1df5f4b006accac24dab47e1e1cd7e4c9 Mon Sep 17 00:00:00 2001
From: Bruno Dias <dias.h.bruno@gmail.com>
Date: Tue, 6 Jun 2017 22:06:36 -0300
Subject: [PATCH] [feature] deprecate getParentElement in favor of findDOMNode.

Test case was written by @restrry.

Original PR:

https://github.com/restrry/react-modal/commit/b9a34155bf37298e99922f77dec8e27292db06d9.
---
 README.md               | 20 ++----------------
 lib/components/Modal.js | 44 ++++++++++++++++----------------------
 specs/Modal.spec.js     | 56 ++++++++++++++++++++++++++++++++++++-------------
 3 files changed, 62 insertions(+), 58 deletions(-)

diff --git a/README.md b/README.md
index 6b6f9f5..998893c 100644
--- a/README.md
+++ b/README.md
@@ -107,24 +107,8 @@ The default styles above are available on `Modal.defaultStyles`. Changes to this
 object will apply to all instances of the modal.
 
 ### Appended to custom node
-You can choose an element for the modal to be appended to, rather than using
-body tag. To do this, provide a function to `parentSelector` prop that return
-the element to be used.
-
-```jsx
-
-function getParent() {
-  return document.querySelector('#root');
-}
-
-<Modal
-  ...
-  parentSelector={getParent}
-  ...
->
-  <p>Modal Content.</p>
-</Modal>
-```
+`parentSelector` is now deprecated. `<Modal />` can be appended on any place
+and it will correctly manage it's clean up.
 
 ### Body class
 When the modal is opened a `ReactModal__Body--open` class is added to the `body` tag.
diff --git a/lib/components/Modal.js b/lib/components/Modal.js
index 34d23b1..fdc6063 100644
--- a/lib/components/Modal.js
+++ b/lib/components/Modal.js
@@ -6,16 +6,14 @@ var ModalPortal = React.createFactory(require('./ModalPortal'));
 var ariaAppHider = require('../helpers/ariaAppHider');
 var refCount = require('../helpers/refCount');
 var elementClass = require('element-class');
-var renderSubtreeIntoContainer = require("react-dom").unstable_renderSubtreeIntoContainer;
+var renderSubtreeIntoContainer = ReactDOM.unstable_renderSubtreeIntoContainer;
+var findDOMNode = ReactDOM.findDOMNode;
 var Assign = require('lodash.assign');
-var createReactClass = require('create-react-class')
+var createReactClass = require('create-react-class');
 
 var SafeHTMLElement = ExecutionEnvironment.canUseDOM ? window.HTMLElement : {};
 var AppElement = ExecutionEnvironment.canUseDOM ? document.body : {appendChild: function() {}};
 
-function getParentElement(parentSelector) {
-  return parentSelector();
-}
 
 var Modal = createReactClass({
 
@@ -45,7 +43,6 @@ var Modal = createReactClass({
     closeTimeoutMS: PropTypes.number,
     ariaHideApp: PropTypes.bool,
     shouldCloseOnOverlayClick: PropTypes.bool,
-    parentSelector: PropTypes.func,
     role: PropTypes.string,
     contentLabel: PropTypes.string.isRequired
   },
@@ -57,37 +54,28 @@ var Modal = createReactClass({
       bodyOpenClassName: 'ReactModal__Body--open',
       ariaHideApp: true,
       closeTimeoutMS: 0,
-      shouldCloseOnOverlayClick: true,
-      parentSelector: function () { return document.body; }
+      shouldCloseOnOverlayClick: true
     };
   },
 
   componentDidMount: function() {
-    this.node = document.createElement('div');
-    this.node.className = this.props.portalClassName;
+    this.node = findDOMNode(this);
 
     if (this.props.isOpen) refCount.add(this);
 
-    var parent = getParentElement(this.props.parentSelector);
-    parent.appendChild(this.node);
     this.renderPortal(this.props);
   },
 
   componentWillReceiveProps: function(newProps) {
     if (newProps.isOpen) refCount.add(this);
     if (!newProps.isOpen) refCount.remove(this);
-    var currentParent = getParentElement(this.props.parentSelector);
-    var newParent = getParentElement(newProps.parentSelector);
-
-    if(newParent !== currentParent) {
-      currentParent.removeChild(this.node);
-      newParent.appendChild(this.node);
-    }
 
     this.renderPortal(newProps);
   },
 
   componentWillUnmount: function() {
+    if (!this.portal) return;
+
     refCount.remove(this);
 
     if (this.props.ariaHideApp) {
@@ -114,9 +102,7 @@ var Modal = createReactClass({
 
   removePortal: function() {
     ReactDOM.unmountComponentAtNode(this.node);
-    var parent = getParentElement(this.props.parentSelector);
-    parent.removeChild(this.node);
-
+    this.portal = null;
     if (refCount.count() === 0) {
       elementClass(document.body).remove(this.props.bodyOpenClassName);
     }
@@ -133,11 +119,17 @@ var Modal = createReactClass({
       ariaAppHider.toggle(props.isOpen, props.appElement);
     }
 
-    this.portal = renderSubtreeIntoContainer(this, ModalPortal(Assign({}, props, {defaultStyles: Modal.defaultStyles})), this.node);
+    this.portal = renderSubtreeIntoContainer(
+      this,
+      ModalPortal(Assign({}, props, { defaultStyles: Modal.defaultStyles })),
+      this.node
+    );
   },
 
   render: function () {
-    return React.DOM.noscript();
+    return (
+      <div className={this.props.portalClassName}></div>
+    );
   }
 });
 
@@ -164,6 +156,6 @@ Modal.defaultStyles = {
     outline                 : 'none',
     padding                 : '20px'
   }
-}
+};
 
-module.exports = Modal
+module.exports = Modal;
diff --git a/specs/Modal.spec.js b/specs/Modal.spec.js
index 9dfa385..a34b408 100644
--- a/specs/Modal.spec.js
+++ b/specs/Modal.spec.js
@@ -1,7 +1,7 @@
 /* eslint-env mocha */
 import sinon from 'sinon';
 import expect from 'expect';
-import React from 'react';
+import React, { Component } from 'react';
 import ReactDOM from 'react-dom';
 import TestUtils from 'react-addons-test-utils';
 import Modal from '../lib/components/Modal';
@@ -60,26 +60,21 @@ describe('State', () => {
     ReactDOM.unmountComponentAtNode(node);
   });
 
-  it('renders into the body, not in context', () => {
+  it('renders in context, never in document.body', function() {
     var node = document.createElement('div');
     var App = React.createClass({
       render() {
-        return (
-          <div>
-            <Modal isOpen={true}>
-              <span>hello</span>
-            </Modal>
-          </div>
-        );
+	return (
+	  <Modal isOpen={true}>
+	    hello
+	  </Modal>
+	);
       }
     });
     Modal.setAppElement(node);
     ReactDOM.render(<App />, node);
-    expect(
-      document.body.querySelector('.ReactModalPortal').parentNode
-    ).toEqual(
-      document.body
-    );
+    var modalParent = node.querySelector('.ReactModalPortal').parentNode;
+    expect(modalParent).toEqual(node);
     ReactDOM.unmountComponentAtNode(node);
   });
 
@@ -308,4 +303,37 @@ describe('State', () => {
       done();
     }, closeTimeoutMS);
   });
+
+  it('shouldn\'t throw if forcibly unmounted during mounting', () => {
+    /* eslint-disable camelcase, react/prop-types */
+    class Wrapper extends Component {
+      constructor (props) {
+        super(props);
+        this.state = { error: false };
+      }
+      unstable_handleError () {
+        this.setState({ error: true });
+      }
+      render () {
+        return this.state.error ? null : <div>{ this.props.children }</div>;
+      }
+    }
+    /* eslint-enable camelcase, react/prop-types */
+
+    const Throw = () => { throw new Error('reason'); };
+    const TestCase = () => (
+      <Wrapper>
+        <Modal />
+        <Throw />
+      </Wrapper>
+    );
+
+    const currentDiv = document.createElement('div');
+    document.body.appendChild(currentDiv);
+
+    const mount = () => ReactDOM.render(<TestCase />, currentDiv);
+    expect(mount).toNotThrow();
+
+    document.body.removeChild(currentDiv);
+  });
 });
-- 
2.13.1

